# test redis
location /redis {
    default_type 'text/plain';
    content_by_lua_block {
        local redis = require "resty.redis"
        local red = redis:new()

        red:set_timeout(1000) -- 1 sec

        local ok, err = red:connect("127.0.0.1", 6379)
        if not ok then
            ngx.say("failed to connect: ", err)
            return
        end

        ngx.say("connect redis")

        ok, err = red:set("dog", "an animal")
        if not ok then
            ngx.say("failed to set dog: ", err)
            return
        end

        ngx.say("set result: ", ok)

        local res, err = red:get("dog")
        if not res then
            ngx.say("failed to get dog: ", err)
            return
        end

        if res == ngx.null then
            ngx.say("dog not found.")
            return
        end

        ngx.say("dog: ", res)

        red:set("cat", "Marry")
        red:init_pipeline()
        red:set("horse", "Bob")
        red:get("cat")
        red:get("horse")
        local results, err = red:commit_pipeline()
        if not results then
            ngx.say("failed to commit the pipelined requests: ", err)
            return
        end

        for i, res in ipairs(results) do
            if type(res) == "table" then
                if res[1] == false then
                    ngx.say("failed to run command ", i, ": ", res[2])
                else
                    -- process the table value
                    for j, r in ipairs(res) do
                        ngx.say('tba: ', i, ' ', j, ' ', r)
                    end
                end
            else
                ngx.say(i, ' ', res)
                -- process the scalar value
            end
        end

        -- put it into the connection pool of size 100,
        -- with 10 seconds max idle time
        local ok, err = red:set_keepalive(10000, 100)
        if not ok then
            ngx.say("failed to set keepalive: ", err)
            return
        end
    }
}

location /test_pass {
    default_type 'text/plain';
    content_by_lua_block {
        ngx.say('123456')
    }
}
